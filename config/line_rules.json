[
  {
    "regex": {
      "all": "\\bNo newline at end of file"
    },
    "name": "New line warning",
    "offset": 1
  },
  {
    "regex": {
      "all": "#{( .*|.* )}"
    },
    "name": "Extra space"
  },
  {
    "regex": {
      "rb": "=\\w",
      "erb": "=\\w",
      "haml": "=\\w",
      "slim": "=\\w",
      "coffee": "=\\w",
      "js": "=\\w"
    },
    "name": "Missing space"
  },
  {
    "regex": {
      "rb": "(^|[^#]){([^ ].*(:|=>).*|.*(:|=>).*[^ ])}",
      "erb": "(^|[^#]){([^ ].*(:|=>).*|.*(:|=>).*[^ ])}",
      "haml": "(^|[^#]){([^ ].*(:|=>).*|.*(:|=>).*[^ ])}",
      "slim": "(^|[^#]){([^ ].*(:|=>).*|.*(:|=>).*[^ ])}",
      "coffee": "(^|[^#]){([^ ].*(:|=>).*|.*(:|=>).*[^ ])}",
      "js": "(^|[^#]){([^ ].*(:|=>).*|.*(:|=>).*[^ ])}"
    },
    "name": "Missing space"
  },
  {
    "regex": {
      "rb": "[\\w'\\\"]:[^: /]",
      "erb": "[\\w'\\\"]:[^: /]",
      "haml": "[\\w'\\\"]:[^: /]",
      "slim": "[\\w'\\\"]:[^: /]",
      "coffee": "[\\w'\\\"]:[^: /]",
      "js": "[\\w'\\\"]:[^: /]"
    },
    "name": "Missing space"
  },
  {
    "regex": {
      "erb": "<%([^ =].*|[^=].*[^ ])%>"
    },
    "name": "Missing space"
  },
  {
    "regex": {
      "coffee": "^\\+?[ \\t]*return\\W",
      "rb": "^\\+?[ \\t]*return\\W"
    },
    "name": "Explicit return"
  },
  {
    "regex": {
      "erb": "<input\\W.*text",
      "haml": "%input\\W.*text",
      "slim": "\\binput\\W.*text"
    },
    "name": "Use text field tag"
  },
  {
    "regex": {
      "erb": "<input\\W.*email",
      "haml": "%input\\W.*email",
      "slim": "\\binput\\W.*email"
    },
    "name": "Use email field tag"
  },
  {
    "regex": {
      "erb": "<input\\W.*number",
      "haml": "%input\\W.*number",
      "slim": "\\binput\\W.*number"
    },
    "name": "Use number field tag"
  },
  {
    "regex": {
      "erb": "<input\\W.*file",
      "haml": "%input\\W.*file",
      "slim": "\\binput\\W.*file"
    },
    "name": "Use file field tag"
  },
  {
    "regex": {
      "erb": "<input\\W.*hidden",
      "haml": "%input\\W.*hidden",
      "slim": "^\\+?[ \\t]*input\\W.*hidden"
    },
    "name": "Use hidden field tag"
  },
  {
    "regex": {
      "erb": "<select\\W",
      "haml": "%select\\W",
      "slim": "^\\+?[ \\t]*select\\W"
    },
    "name": "Use select tag"
  },
  {
    "regex": {
      "erb": "<a\\W",
      "haml": "%a\\W",
      "slim": "^\\+?[ \\t]*a\\W"
    },
    "name": "Use link to"
  },
  {
    "regex": {
      "erb": "<img\\W",
      "haml": "%img\\W",
      "slim": "\\bimg\\W"
    },
    "name": "Use image tag"
  },
  {
    "regex": {
      "haml": "%div\\W",
      "slim": "\\bdiv\\W"
    },
    "name": "Explicit div"
  },
  {
    "regex": {
      "rb": ":\\w+ *=>",
      "erb": ":\\w+ *=>",
      "haml": ":\\w+ *=>",
      "slim": ":\\w+ *=>"
    },
    "name": "Old hash syntax"
  },
  {
    "regex": {
      "rb": "(before|after|around)_filter"
    },
    "name": "Use action"
  },
  {
    "regex": {
      "rb": "where\\([^\\)]*\\).count *(>|<|>=|<=|==) *[01]\\b"
    },
    "name": "Check exists"
  },
  {
    "regex": {
      "erb": "render[ \\(]*partial((?!collection).)*",
      "haml": "render[ \\(]*partial((?!collection).)*",
      "slim": "render[ \\(]*partial((?!collection).)*"
    },
    "name": "Partial redundancy"
  },
  {
    "regex": {
      "erb": "render.*locals:",
      "haml": "render.*locals:",
      "slim": "render.*locals:"
    },
    "name": "Locals redundancy"
  },
  {
    "regex": {
      "rb": "(expect.*)\\.(\\w+)\\?(\\(.*\\))?\\).*(be_truthy|be true|eq true)"
    },
    "name": "Use to be matchers"
  },
  {
    "regex": {
      "rb": "(expect.*)\\.(\\w+)\\?(\\(.*\\))?\\).*(be_falsey|be_falsy|be false|eq false)"
    },
    "name": "Use not_to be matchers"
  },
  {
    "regex": {
      "rb": "FactoryGirl\\.(create|build)"
    },
    "name": "Add factory girl syntax"
  },
  {
    "regex": {
      "rb": "expect\\( *response.status *\\).to eq\\W(\\d+)"
    },
    "name": "Use have_http_status"
  },
  {
    "regex": {
      "xml": "^\\+?[ \t]*\\w+(:\\w+)? *= *[\"'] *((?!0dp)\\d+) *(dp|sp|dip|px) *[\"']"
    },
    "name": "Hardcoded dimensions"
  },
  {
    "regex": {
      "xml": "^\\+?[ \t]*\\w+(:\\w+)? *= *[\"'][^@].*\\W.*[\"']"
    },
    "name": "Hardcoded string"
  },
  {
    "regex": {
      "css": "(-moz|-webkit|-ms)-",
      "scss": "(-moz|-webkit|-ms)-",
      "sass": "(-moz|-webkit|-ms)-",
      "less": "(-moz|-webkit|-ms)-"
    },
    "name": "Use auto prefixer gem"
  },
  {
    "regex": {
      "all": "\\.nil\\?"
    },
    "name": "Nil checking"
  },
  {
    "regex": {
      "all": "\\!(.+) *\\|\\| *(\\1)(\\.empty\\?|(\\.count|\\.length) *(== *0|< *1))"
    },
    "name": "Use blank"
  },
  {
    "regex": {
      "all": "(.+) *\\&\\& *(\\!\\1\\.empty\\?|\\1(\\.count|\\.length) *(> *0|>= *1))"
    },
    "name": "Use present"
  },
  {
    "regex": {
      "rb": "has_(many|one)[ \t]*:(?:(?!through|dependent).)*$"
    },
    "name": "Add dependent destroy"
  },
  {
    "regex": {
      "rb": "has_many[ \t]*:(\\w+)(\\W|$)"
    },
    "constraint": "plural",
    "name": "Use plural form"
  },
  {
    "regex": {
      "rb": "(?:has_one|belongs_to)[ \t]*:(\\w+)(\\W|$)"
    },
    "constraint": "singular",
    "name": "Use singular form"
  },
  {
    "regex": {
      "all": "(\\w+)\\.(?:(?:blank|nil)\\?) *\\? *0 *: *\\1\\.(\\w+)"
    },
    "name": "Use to_i"
  },
  {
    "regex": {
      "all": "(\\w+)(?:\\.present\\?)? \\? *\\1\\.(\\w+) *: *0"
    },
    "name": "Use to_i"
  }
]
